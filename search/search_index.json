{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pycommons-base","text":"<p>Python Commons Base package that serves as the base package for all the other pycommons libraries like pycommons-lang and pycommons-collections.</p>"},{"location":"#get-started","title":"Get Started","text":"<p>To get started with this library, you can install this in your virtual environment by running</p> <pre><code>pip install pycommons-base\n</code></pre> <p>With poetry, you can run the following command to add the library to your project</p> <pre><code>poetry add pycommons-base\n</code></pre> <p>Note</p> <p>To install alpha, beta and release candidate versions of the package use the package published to https://test.pypi.org</p>"},{"location":"#license","title":"License","text":"<p>Apache-2.0 (See License)</p>"},{"location":"#author","title":"Author","text":"<p>Shashank Sharma.</p>"},{"location":"package/atomic/atomic/","title":"pycommons.base.atomic","text":""},{"location":"package/atomic/atomic/#pycommons.base.atomic.Atomic","title":"<code>Atomic</code>","text":"<p>             Bases: <code>Container[_T]</code>, <code>RLockSynchronized</code>, <code>Generic[_T]</code></p> <p>Atomic mutable container, that holds a value in the object and only allows synchronized read and write. This implementation is thread-safe and can be used across multiple threads. If the container is used only on a single thread, consider using the Container, and it's derived classes.</p> <p>The object is held on a re-entrant lock during reads and writes and is unlocked after the operation is complete.</p> References <p>https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReference.html</p> Source code in <code>pycommons/base/atomic/atomic.py</code> <pre><code>class Atomic(Container[_T], RLockSynchronized, Generic[_T]):\n\"\"\"\n    Atomic mutable container, that holds a value in the object\n    and only allows synchronized read and write.\n    This implementation is thread-safe and can be used across multiple threads.\n    If the container is used only on a single thread, consider\n    using the [Container][pycommons.base.container], and it's derived classes.\n\n    The object is held on a re-entrant lock during reads and writes\n    and is unlocked after the operation is complete.\n\n    References:\n        https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReference.html\n    \"\"\"\n\n    def __init__(self, t: Optional[_T] = None):\n        super().__init__(t)\n        RLockSynchronized.__init__(self)\n\n    @synchronized\n    def get(self) -&gt; Optional[_T]:\n        return super().get()\n\n    @synchronized\n    def set(self, t: _T) -&gt; None:\n        super().set(t)\n\n    @synchronized\n    def set_and_get(self, t: Optional[_T]) -&gt; Optional[_T]:\n        return super().set_and_get(t)\n\n    @synchronized\n    def get_and_set(self, t: Optional[_T]) -&gt; Optional[_T]:\n        return super().get_and_set(t)\n</code></pre>"},{"location":"package/atomic/atomic/#pycommons.base.atomic.AtomicBoolean","title":"<code>AtomicBoolean</code>","text":"<p>             Bases: <code>BooleanContainer</code>, <code>Atomic[bool]</code></p> <p>Atomic Boolean Container that allows atomic update of the container value. The object is synchronized for read and write operations so that only one read/write happens at a time. This is ensured using re-entrant locks. Provides all the functionalities provided by the BooleanContainer</p> Source code in <code>pycommons/base/atomic/boolean.py</code> <pre><code>class AtomicBoolean(BooleanContainer, Atomic[bool]):  # pylint: disable=R0901\n\"\"\"\n    Atomic Boolean Container that allows atomic update of the container value.\n    The object is synchronized for read and write operations so that only one read/write\n    happens at a time. This is ensured using re-entrant locks. Provides\n    all the functionalities provided by the\n    [BooleanContainer][pycommons.base.container.BooleanContainer]\n\n    \"\"\"\n\n    @synchronized\n    def true(self) -&gt; bool:\n        return super().true()\n\n    @synchronized\n    def false(self) -&gt; bool:\n        return super().false()\n\n    @synchronized\n    def compliment(self) -&gt; bool:\n        return super().compliment()\n\n    @classmethod\n    def with_true(cls) -&gt; AtomicBoolean:\n        return cls(True)\n\n    @classmethod\n    def with_false(cls) -&gt; AtomicBoolean:\n        return cls(False)\n\n    @synchronized\n    def get(self) -&gt; bool:\n        return super().get()\n</code></pre>"},{"location":"package/concurrent/executor/executor/","title":"pycommons.base.concurrent.executor","text":""},{"location":"package/concurrent/executor/executor/#pycommons.base.concurrent.executor.DirectExecutor","title":"<code>DirectExecutor</code>","text":"<p>             Bases: <code>Executor</code></p> <p>An Executor that runs the intended job in the same thread as that of the caller. This is usually helpful when writing tests for background processes.</p> Source code in <code>pycommons/base/concurrent/executor/direct.py</code> <pre><code>class DirectExecutor(Executor):\n\"\"\"\n    An Executor that runs the intended job in the same thread as that of the caller.\n    This is usually helpful when writing tests for background processes.\n    \"\"\"\n\n    __instance__: ClassVar[DirectExecutor]\n\"\"\"\n    A class instance of the direct executor which can be used everywhere\n    for executing a task in the same thread as that of the caller.\n    \"\"\"\n\n    @classmethod\n    def get_instance(cls) -&gt; DirectExecutor:\n\"\"\"\n        Gets the singleton instance of `DirectExecutor`\n\n        Returns:\n            The singleton instance of `DirectExecutor`\n        \"\"\"\n        return cls.__instance__\n\n    def submit(  # pylint: disable=W0221\n        self, fn: Callable[[Any], _T], *args: Any, **kwargs: Any\n    ) -&gt; Future[_T]:  # pylint: disable=W0221\n\"\"\"\n        Submits a callable to run in the same thread as the caller.\n\n        Args:\n            fn: The callable\n            *args: Arguments of the callable\n            **kwargs: Keyword args of the callable\n\n        Returns:\n            Future object\n        \"\"\"\n        _future: Future[_T] = Future()\n\n        try:\n            result: _T = fn(*args, **kwargs)\n        except BaseException as exc:  # pylint: disable=W0718\n            _future.set_exception(exc)\n        else:\n            _future.set_result(result)\n\n        return _future\n</code></pre>"},{"location":"package/concurrent/executor/executor/#pycommons.base.concurrent.executor.direct.DirectExecutor.__instance__","title":"<code>__instance__: DirectExecutor</code>  <code>class-attribute</code>","text":"<p>A class instance of the direct executor which can be used everywhere for executing a task in the same thread as that of the caller.</p>"},{"location":"package/concurrent/executor/executor/#pycommons.base.concurrent.executor.direct.DirectExecutor.get_instance","title":"<code>get_instance()</code>  <code>classmethod</code>","text":"<p>Gets the singleton instance of <code>DirectExecutor</code></p> <p>Returns:</p> Type Description <code>DirectExecutor</code> <p>The singleton instance of <code>DirectExecutor</code></p> Source code in <code>pycommons/base/concurrent/executor/direct.py</code> <pre><code>@classmethod\ndef get_instance(cls) -&gt; DirectExecutor:\n\"\"\"\n    Gets the singleton instance of `DirectExecutor`\n\n    Returns:\n        The singleton instance of `DirectExecutor`\n    \"\"\"\n    return cls.__instance__\n</code></pre>"},{"location":"package/concurrent/executor/executor/#pycommons.base.concurrent.executor.direct.DirectExecutor.submit","title":"<code>submit(fn, *args, **kwargs)</code>","text":"<p>Submits a callable to run in the same thread as the caller.</p> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable[[Any], _T]</code> <p>The callable</p> required <code>*args</code> <code>Any</code> <p>Arguments of the callable</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>Keyword args of the callable</p> <code>{}</code> <p>Returns:</p> Type Description <code>Future[_T]</code> <p>Future object</p> Source code in <code>pycommons/base/concurrent/executor/direct.py</code> <pre><code>def submit(  # pylint: disable=W0221\n    self, fn: Callable[[Any], _T], *args: Any, **kwargs: Any\n) -&gt; Future[_T]:  # pylint: disable=W0221\n\"\"\"\n    Submits a callable to run in the same thread as the caller.\n\n    Args:\n        fn: The callable\n        *args: Arguments of the callable\n        **kwargs: Keyword args of the callable\n\n    Returns:\n        Future object\n    \"\"\"\n    _future: Future[_T] = Future()\n\n    try:\n        result: _T = fn(*args, **kwargs)\n    except BaseException as exc:  # pylint: disable=W0718\n        _future.set_exception(exc)\n    else:\n        _future.set_result(result)\n\n    return _future\n</code></pre>"},{"location":"package/concurrent/executor/executor/#pycommons.base.concurrent.executor.Executors","title":"<code>Executors</code>","text":"<p>             Bases: <code>UtilityClass</code></p> <p>The Executors Utility class that contains methods to create different executors.</p> Source code in <code>pycommons/base/concurrent/executor/executors.py</code> <pre><code>class Executors(UtilityClass):\n\"\"\"\n    The Executors Utility class that contains methods to create different executors.\n    \"\"\"\n\n    @classmethod\n    def get_direct_executor(cls) -&gt; DirectExecutor:\n\"\"\"\n        Get the singleton instance of \"DirectExecutor\" that runs the callable\n        in the same thread as the caller.\n\n        Returns:\n            The singleton instance of `DirectExecutor`\n        \"\"\"\n        return DirectExecutor.get_instance()\n\n    @classmethod\n    def new_single_thread_executor(cls, *args: Any, **kwargs: Any) -&gt; ThreadPoolExecutor:\n\"\"\"\n        A special threadpool executor where the max number of worker\n        threads is 1. If multiple tasks are submitted to this executor, they are queued\n        until the thread becomes idle.\n\n        Args:\n            *args: Arguments for threadpool executor\n            **kwargs: Keyword Arguments for threadpool executor\n\n        Returns:\n            a new instance of `ThreadPoolExecutor` with number of threads set to 1\n        \"\"\"\n        return cls.new_fixed_thread_pool_executor(1, *args, **kwargs)\n\n    @classmethod\n    def new_fixed_thread_pool_executor(\n        cls, n_threads: int, *args: Any, **kwargs: Any\n    ) -&gt; ThreadPoolExecutor:\n\"\"\"\n        A fixed threadpool with number of threads set. Can be used within a context\n\n        Args:\n            n_threads: Number of worker threads\n            *args: Arguments for threadpool executor\n            **kwargs: Keyword Arguments for threadpool executor\n\n        Returns:\n            A new instance of threadpool executor\n        \"\"\"\n        return ThreadPoolExecutor(n_threads, *args, **kwargs)\n</code></pre>"},{"location":"package/concurrent/executor/executor/#pycommons.base.concurrent.executor.executors.Executors.get_direct_executor","title":"<code>get_direct_executor()</code>  <code>classmethod</code>","text":"<p>Get the singleton instance of \"DirectExecutor\" that runs the callable in the same thread as the caller.</p> <p>Returns:</p> Type Description <code>DirectExecutor</code> <p>The singleton instance of <code>DirectExecutor</code></p> Source code in <code>pycommons/base/concurrent/executor/executors.py</code> <pre><code>@classmethod\ndef get_direct_executor(cls) -&gt; DirectExecutor:\n\"\"\"\n    Get the singleton instance of \"DirectExecutor\" that runs the callable\n    in the same thread as the caller.\n\n    Returns:\n        The singleton instance of `DirectExecutor`\n    \"\"\"\n    return DirectExecutor.get_instance()\n</code></pre>"},{"location":"package/concurrent/executor/executor/#pycommons.base.concurrent.executor.executors.Executors.new_fixed_thread_pool_executor","title":"<code>new_fixed_thread_pool_executor(n_threads, *args, **kwargs)</code>  <code>classmethod</code>","text":"<p>A fixed threadpool with number of threads set. Can be used within a context</p> <p>Parameters:</p> Name Type Description Default <code>n_threads</code> <code>int</code> <p>Number of worker threads</p> required <code>*args</code> <code>Any</code> <p>Arguments for threadpool executor</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>Keyword Arguments for threadpool executor</p> <code>{}</code> <p>Returns:</p> Type Description <code>ThreadPoolExecutor</code> <p>A new instance of threadpool executor</p> Source code in <code>pycommons/base/concurrent/executor/executors.py</code> <pre><code>@classmethod\ndef new_fixed_thread_pool_executor(\n    cls, n_threads: int, *args: Any, **kwargs: Any\n) -&gt; ThreadPoolExecutor:\n\"\"\"\n    A fixed threadpool with number of threads set. Can be used within a context\n\n    Args:\n        n_threads: Number of worker threads\n        *args: Arguments for threadpool executor\n        **kwargs: Keyword Arguments for threadpool executor\n\n    Returns:\n        A new instance of threadpool executor\n    \"\"\"\n    return ThreadPoolExecutor(n_threads, *args, **kwargs)\n</code></pre>"},{"location":"package/concurrent/executor/executor/#pycommons.base.concurrent.executor.executors.Executors.new_single_thread_executor","title":"<code>new_single_thread_executor(*args, **kwargs)</code>  <code>classmethod</code>","text":"<p>A special threadpool executor where the max number of worker threads is 1. If multiple tasks are submitted to this executor, they are queued until the thread becomes idle.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>Any</code> <p>Arguments for threadpool executor</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>Keyword Arguments for threadpool executor</p> <code>{}</code> <p>Returns:</p> Type Description <code>ThreadPoolExecutor</code> <p>a new instance of <code>ThreadPoolExecutor</code> with number of threads set to 1</p> Source code in <code>pycommons/base/concurrent/executor/executors.py</code> <pre><code>@classmethod\ndef new_single_thread_executor(cls, *args: Any, **kwargs: Any) -&gt; ThreadPoolExecutor:\n\"\"\"\n    A special threadpool executor where the max number of worker\n    threads is 1. If multiple tasks are submitted to this executor, they are queued\n    until the thread becomes idle.\n\n    Args:\n        *args: Arguments for threadpool executor\n        **kwargs: Keyword Arguments for threadpool executor\n\n    Returns:\n        a new instance of `ThreadPoolExecutor` with number of threads set to 1\n    \"\"\"\n    return cls.new_fixed_thread_pool_executor(1, *args, **kwargs)\n</code></pre>"},{"location":"package/concurrent/future/future/","title":"pycommons.base.concurrent.future","text":""},{"location":"package/concurrent/future/future/#pycommons.base.concurrent.future.FutureOnDoneCallback","title":"<code>FutureOnDoneCallback</code>","text":"<p>             Bases: <code>Function[Future, _T]</code>, <code>ABC</code>, <code>Generic[_T]</code></p> <p>A Functional Interface that can be used to register a callback using the Future's <code>add_done_callback</code> method</p> Source code in <code>pycommons/base/concurrent/future/callback.py</code> <pre><code>class FutureOnDoneCallback(Function[Future, _T], ABC, Generic[_T]):  # type: ignore\n\"\"\"\n    A Functional Interface that can be used to register a callback using the\n    Future's `add_done_callback` method\n    \"\"\"\n</code></pre>"},{"location":"package/container/container/","title":"pycommons.base.container","text":""},{"location":"package/container/container/#pycommons.base.container.BooleanContainer","title":"<code>BooleanContainer</code>","text":"<p>             Bases: <code>Container[bool]</code></p> <p>A mutable container extends the Container and stores a boolean value. Custom helper methods are provided in the class to manipulate with the value present in the container. If the value of the boolean is not passed during initialization, it is set to <code>False</code> by default.</p> <p>The class also implements the <code>__bool__</code> magic method, so that the container object can directly be used in the conditional expressions.</p> Warning <p>This class is not thread safe. If you need a thread safe BooleanContainer, checkout AtomicBoolean</p> <p>Examples:</p> <p><pre><code>from pycommons.base.container import BooleanContainer\n\nboolean_container = BooleanContainer.with_true()\n\nassert boolean_container.get()\nassert bool(boolean_container)\n\nboolean_container.false()\n\nassert boolean_container.get() is False\nassert boolean_container.compliment()\n</code></pre> This script is complete, it should run as is.</p> References <p>https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/mutable/MutableBoolean.html</p> Source code in <code>pycommons/base/container/boolean.py</code> <pre><code>class BooleanContainer(Container[bool]):\n\"\"\"\n    A mutable container extends the [Container][pycommons.base.container.Container] and stores\n    a boolean value. Custom helper methods are provided in the class to manipulate\n    with the value present in the container. If the value of the boolean is not passed during\n    initialization, it is set to `False` by default.\n\n    The class also implements the `__bool__` magic method, so that the container object can directly\n    be used in the conditional expressions.\n\n    Warning:\n        This class is not thread safe. If you need a thread safe BooleanContainer, checkout\n        [AtomicBoolean][pycommons.base.atomic.AtomicBoolean]\n\n    Examples:\n        ```python\n        from pycommons.base.container import BooleanContainer\n\n        boolean_container = BooleanContainer.with_true()\n\n        assert boolean_container.get()\n        assert bool(boolean_container)\n\n        boolean_container.false()\n\n        assert boolean_container.get() is False\n        assert boolean_container.compliment()\n        ```\n        This script is complete, it should run as is.\n\n    References:\n        https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/mutable/MutableBoolean.html\n    \"\"\"\n\n    def __init__(self, flag: bool = False):\n\"\"\"\n        Initialize the container with a value, False by default\n        Args:\n            flag: value of the container\n        \"\"\"\n        super().__init__(flag)\n\n    def true(self) -&gt; bool:\n\"\"\"\n        Set the value of the container to `True` regardless\n        of the previous value.\n        Returns:\n            True\n        \"\"\"\n        return typing.cast(bool, self.set_and_get(True))\n\n    def false(self) -&gt; bool:\n\"\"\"\n        Set the value of the container to `False` regardless\n        of the previous value.\n\n        Returns:\n            False\n        \"\"\"\n        return typing.cast(bool, self.set_and_get(False))\n\n    def compliment(self) -&gt; bool:\n\"\"\"\n        Compliment the current value present in the container. If the value\n        of the container is True, the container value is set to False and False is returned\n        and vice-versa\n        Returns:\n\n        \"\"\"\n        return typing.cast(bool, self.set_and_get(not self.get()))\n\n    @classmethod\n    def with_true(cls) -&gt; BooleanContainer:\n\"\"\"\n        Class method to initialize a new BooleanContainer with the value `True`.\n\n        Returns:\n            A new container with value set to `True`\n        \"\"\"\n        return cls(True)\n\n    @classmethod\n    def with_false(cls) -&gt; BooleanContainer:\n\"\"\"\n        Class method to initialize a new BooleanContainer with the value `False`.\n\n        Returns:\n            A new container with value set to `False`\n        \"\"\"\n        return cls(False)\n\n    def get(self) -&gt; bool:\n\"\"\"\n        Gets the value in the container.\n\n        Returns:\n            The boolean value in the container.\n        \"\"\"\n        return typing.cast(bool, super().get())\n\n    def __bool__(self) -&gt; bool:\n        return self.get()\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.boolean.BooleanContainer.__init__","title":"<code>__init__(flag=False)</code>","text":"<p>Initialize the container with a value, False by default</p> <p>Parameters:</p> Name Type Description Default <code>flag</code> <code>bool</code> <p>value of the container</p> <code>False</code> Source code in <code>pycommons/base/container/boolean.py</code> <pre><code>def __init__(self, flag: bool = False):\n\"\"\"\n    Initialize the container with a value, False by default\n    Args:\n        flag: value of the container\n    \"\"\"\n    super().__init__(flag)\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.boolean.BooleanContainer.compliment","title":"<code>compliment()</code>","text":"<p>Compliment the current value present in the container. If the value of the container is True, the container value is set to False and False is returned and vice-versa</p> Source code in <code>pycommons/base/container/boolean.py</code> <pre><code>def compliment(self) -&gt; bool:\n\"\"\"\n    Compliment the current value present in the container. If the value\n    of the container is True, the container value is set to False and False is returned\n    and vice-versa\n    Returns:\n\n    \"\"\"\n    return typing.cast(bool, self.set_and_get(not self.get()))\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.boolean.BooleanContainer.false","title":"<code>false()</code>","text":"<p>Set the value of the container to <code>False</code> regardless of the previous value.</p> <p>Returns:</p> Type Description <code>bool</code> <p>False</p> Source code in <code>pycommons/base/container/boolean.py</code> <pre><code>def false(self) -&gt; bool:\n\"\"\"\n    Set the value of the container to `False` regardless\n    of the previous value.\n\n    Returns:\n        False\n    \"\"\"\n    return typing.cast(bool, self.set_and_get(False))\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.boolean.BooleanContainer.get","title":"<code>get()</code>","text":"<p>Gets the value in the container.</p> <p>Returns:</p> Type Description <code>bool</code> <p>The boolean value in the container.</p> Source code in <code>pycommons/base/container/boolean.py</code> <pre><code>def get(self) -&gt; bool:\n\"\"\"\n    Gets the value in the container.\n\n    Returns:\n        The boolean value in the container.\n    \"\"\"\n    return typing.cast(bool, super().get())\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.boolean.BooleanContainer.true","title":"<code>true()</code>","text":"<p>Set the value of the container to <code>True</code> regardless of the previous value.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True</p> Source code in <code>pycommons/base/container/boolean.py</code> <pre><code>def true(self) -&gt; bool:\n\"\"\"\n    Set the value of the container to `True` regardless\n    of the previous value.\n    Returns:\n        True\n    \"\"\"\n    return typing.cast(bool, self.set_and_get(True))\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.boolean.BooleanContainer.with_false","title":"<code>with_false()</code>  <code>classmethod</code>","text":"<p>Class method to initialize a new BooleanContainer with the value <code>False</code>.</p> <p>Returns:</p> Type Description <code>BooleanContainer</code> <p>A new container with value set to <code>False</code></p> Source code in <code>pycommons/base/container/boolean.py</code> <pre><code>@classmethod\ndef with_false(cls) -&gt; BooleanContainer:\n\"\"\"\n    Class method to initialize a new BooleanContainer with the value `False`.\n\n    Returns:\n        A new container with value set to `False`\n    \"\"\"\n    return cls(False)\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.boolean.BooleanContainer.with_true","title":"<code>with_true()</code>  <code>classmethod</code>","text":"<p>Class method to initialize a new BooleanContainer with the value <code>True</code>.</p> <p>Returns:</p> Type Description <code>BooleanContainer</code> <p>A new container with value set to <code>True</code></p> Source code in <code>pycommons/base/container/boolean.py</code> <pre><code>@classmethod\ndef with_true(cls) -&gt; BooleanContainer:\n\"\"\"\n    Class method to initialize a new BooleanContainer with the value `True`.\n\n    Returns:\n        A new container with value set to `True`\n    \"\"\"\n    return cls(True)\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.Container","title":"<code>Container</code>","text":"<p>             Bases: <code>Generic[_T]</code>, <code>Supplier[Optional[_T]]</code></p> <p>Mirrors the functionalities provided by the MutableObject in the Apache Commons-Lang package. Holds an object if present, None if not. The read and write methods are not thread-safe and are supposed to be used within the same thread.</p> <p>Examples:</p> <p><pre><code>from pycommons.base.container import Container\nfrom pydantic import BaseModel\n\nclass MyModel(BaseModel):\n    foo: int\n    bar: str\n\nmodel = MyModel(foo=2, bar=\"test\")\ncontainer: Container[MyModel] = Container(model)\n\nprint(container.get())\n# MyModel(foo=2, bar='test')\n\nprint(model in container)\n# True\n\nprint(container.unset())\n# MyModel(foo=2, bar='test')\n\nprint(container.get())\n# None\n\nprint(container.set_and_get(model))\n# MyModel(foo=2, bar='test')\n\nprint(container.get_and_set(MyModel(foo=3, bar=\"test2\")))\n# MyModel(foo=2, bar='test')\n\ncontainer.get()\n# MyModel(foo=3, bar='test2')\n</code></pre> This script is complete, it should run as is.</p> References <p>https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/mutable/MutableObject.html</p> Source code in <code>pycommons/base/container/container.py</code> <pre><code>class Container(Generic[_T], Supplier[Optional[_T]]):\n\"\"\"\n    Mirrors the functionalities provided by the MutableObject in the Apache Commons-Lang package.\n    Holds an object if present, None if not. The read and write methods are not thread-safe\n    and are supposed to be used within the same thread.\n\n    Examples:\n        ```python\n        from pycommons.base.container import Container\n        from pydantic import BaseModel\n\n        class MyModel(BaseModel):\n            foo: int\n            bar: str\n\n        model = MyModel(foo=2, bar=\"test\")\n        container: Container[MyModel] = Container(model)\n\n        print(container.get())\n        # MyModel(foo=2, bar='test')\n\n        print(model in container)\n        # True\n\n        print(container.unset())\n        # MyModel(foo=2, bar='test')\n\n        print(container.get())\n        # None\n\n        print(container.set_and_get(model))\n        # MyModel(foo=2, bar='test')\n\n        print(container.get_and_set(MyModel(foo=3, bar=\"test2\")))\n        # MyModel(foo=2, bar='test')\n\n        container.get()\n        # MyModel(foo=3, bar='test2')\n\n        ```\n        This script is complete, it should run as is.\n\n    References:\n        https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/mutable/MutableObject.html\n    \"\"\"\n\n    def get(self) -&gt; Optional[_T]:\n\"\"\"\n        Get the value held by the container.\n\n        Returns:\n            The object held by the container object\n        \"\"\"\n        return self._object\n\n    def __init__(self, t: Optional[_T] = None):\n\"\"\"\n        Initialize the container\n\n        Args:\n            t: value to be held by container\n        \"\"\"\n        self._object: Optional[_T] = t\n\n    def set(self, t: Optional[_T]) -&gt; None:\n\"\"\"\n        Set the value held by the container. This removes the current\n        value held by the container and holds the new value sent in\n        the arguments. The reference to the old is lost after\n        the execution of this method. To get the old value after setting\n        a new value, use [`get_and_set`][pycommons.base.container.Container.get_and_set]\n\n        Args:\n            t: The new value\n\n        Returns:\n            None\n        \"\"\"\n        self._object = t\n\n    def set_and_get(self, t: Optional[_T]) -&gt; Optional[_T]:\n        self.set(t)\n        return self._object\n\n    def get_and_set(self, t: Optional[_T]) -&gt; Optional[_T]:\n\"\"\"\n        Stores the current value in a temporary object, sets the new value with\n        the argument sent in the methods and returns the old value.\n\n        Args:\n            t: The new value\n\n        Returns:\n            The old value of the container\n        \"\"\"\n        old_object = self._object\n        self._object = t\n        return old_object\n\n    def __contains__(self, item: _T) -&gt; bool:\n        return self._object == item\n\n    @classmethod\n    def with_none(cls) -&gt; Container[Any]:\n        return cls()\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.container.Container.__init__","title":"<code>__init__(t=None)</code>","text":"<p>Initialize the container</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>Optional[_T]</code> <p>value to be held by container</p> <code>None</code> Source code in <code>pycommons/base/container/container.py</code> <pre><code>def __init__(self, t: Optional[_T] = None):\n\"\"\"\n    Initialize the container\n\n    Args:\n        t: value to be held by container\n    \"\"\"\n    self._object: Optional[_T] = t\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.container.Container.get","title":"<code>get()</code>","text":"<p>Get the value held by the container.</p> <p>Returns:</p> Type Description <code>Optional[_T]</code> <p>The object held by the container object</p> Source code in <code>pycommons/base/container/container.py</code> <pre><code>def get(self) -&gt; Optional[_T]:\n\"\"\"\n    Get the value held by the container.\n\n    Returns:\n        The object held by the container object\n    \"\"\"\n    return self._object\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.container.Container.get_and_set","title":"<code>get_and_set(t)</code>","text":"<p>Stores the current value in a temporary object, sets the new value with the argument sent in the methods and returns the old value.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>Optional[_T]</code> <p>The new value</p> required <p>Returns:</p> Type Description <code>Optional[_T]</code> <p>The old value of the container</p> Source code in <code>pycommons/base/container/container.py</code> <pre><code>def get_and_set(self, t: Optional[_T]) -&gt; Optional[_T]:\n\"\"\"\n    Stores the current value in a temporary object, sets the new value with\n    the argument sent in the methods and returns the old value.\n\n    Args:\n        t: The new value\n\n    Returns:\n        The old value of the container\n    \"\"\"\n    old_object = self._object\n    self._object = t\n    return old_object\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.container.Container.set","title":"<code>set(t)</code>","text":"<p>Set the value held by the container. This removes the current value held by the container and holds the new value sent in the arguments. The reference to the old is lost after the execution of this method. To get the old value after setting a new value, use <code>get_and_set</code></p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>Optional[_T]</code> <p>The new value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>pycommons/base/container/container.py</code> <pre><code>def set(self, t: Optional[_T]) -&gt; None:\n\"\"\"\n    Set the value held by the container. This removes the current\n    value held by the container and holds the new value sent in\n    the arguments. The reference to the old is lost after\n    the execution of this method. To get the old value after setting\n    a new value, use [`get_and_set`][pycommons.base.container.Container.get_and_set]\n\n    Args:\n        t: The new value\n\n    Returns:\n        None\n    \"\"\"\n    self._object = t\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.IntegerContainer","title":"<code>IntegerContainer</code>","text":"<p>             Bases: <code>Container[int]</code></p> <p>A mutable container that holds an integer value. Provides the functionalities of Commons-Lang's MutableInt. Provides helper methods to modify the values by adding/subtracting another integer from the existing value. By default, the value is initialized to 0 if not passed during initialization. The class implements multiple magic methods that makes it easy to use in conditional expressions and other type conversions</p> Warning <p>This container implementation is not thread-safe. Use AtomicInteger for synchronized read/write operations</p> Source code in <code>pycommons/base/container/integer.py</code> <pre><code>class IntegerContainer(Container[int]):\n\"\"\"\n    A mutable container that holds an integer value. Provides the functionalities\n    of Commons-Lang's MutableInt. Provides helper methods to modify the values\n    by adding/subtracting another integer from the existing value.\n    By default, the value is initialized to 0 if not passed during initialization.\n    The class implements multiple magic methods that makes it easy to use in conditional\n    expressions and other type conversions\n\n    Warning:\n        This container implementation is not thread-safe. Use\n        [AtomicInteger][pycommons.base.atomic.AtomicInteger] for synchronized\n        read/write operations\n    \"\"\"\n\n    def __init__(self, value: int = 0):\n\"\"\"\n        Initialize the container with a value, zero by default\n\n        Args:\n            value: The value the container holds\n        \"\"\"\n        super().__init__(value)\n\n    def add(self, val: int) -&gt; None:\n\"\"\"\n        Add an integer to the container value and set the result\n        as the container value.\n\n        Args:\n            val: Value to be added to the container value\n\n        Returns:\n            None\n        \"\"\"\n        self.set(self.get() + val)\n\n    def add_and_get(self, val: int) -&gt; int:\n\"\"\"\n        Add a value to the current value and get the result\n\n        Args:\n            val: The value to be added to the container value\n\n        Returns:\n\n        \"\"\"\n        return typing.cast(int, self.set_and_get(self.get() + val))\n\n    def get_and_add(self, val: int) -&gt; int:\n\"\"\"\n        Returns the current value and adds the current value with the\n        value passed in the argument\n\n        Args:\n            val: The value to be added to the container value\n\n        Returns:\n            The current value before performing addition\n        \"\"\"\n        return typing.cast(int, self.get_and_set(self.get() + val))\n\n    def increment(self) -&gt; None:\n\"\"\"\n        Increments the container value by one.\n\n        Returns:\n            None\n        \"\"\"\n        return self.add(1)\n\n    def increment_and_get(self) -&gt; int:\n\"\"\"\n        Increments the container value by one and returns the resulting value.\n\n        Returns:\n            The container value after increment operation\n        \"\"\"\n        return self.add_and_get(1)\n\n    def get_and_increment(self) -&gt; int:\n\"\"\"\n        Gets the current value and then increments the value by one.\n\n        Returns:\n            The container value before increment operation.\n        \"\"\"\n        return self.get_and_add(1)\n\n    def subtract(self, val: int) -&gt; None:\n\"\"\"\n        Subtract a value from the container value\n\n        Args:\n            val: The value to be subtracted from container value\n\n        Returns:\n            None\n        \"\"\"\n        return self.add(-val)\n\n    def subtract_and_get(self, val: int) -&gt; int:\n\"\"\"\n        Subtracts the value from container value and returns\n        the resulting operation after setting it in the container.\n\n        Args:\n            val: value to be subtracted from the container value\n\n        Returns:\n            The resulting value after subtraction operation\n        \"\"\"\n        return self.add_and_get(-val)\n\n    def get_and_subtract(self, val: int) -&gt; int:\n\"\"\"\n        Gets the current value of the container and then subtracts the value\n        from the container value\n\n        Args:\n            val: The value to be subtracted from the container value\n\n        Returns:\n            The value before the subtraction operation\n        \"\"\"\n        return self.get_and_add(-val)\n\n    def get(self) -&gt; int:\n\"\"\"\n        The current value of the container\n\n        Returns:\n            The current value of the container\n        \"\"\"\n        return typing.cast(int, super().get())\n\n    def __int__(self) -&gt; int:\n        return self.get()\n\n    def __le__(self, other: int) -&gt; bool:\n        return self.get() &lt;= other\n\n    def __lt__(self, other: int) -&gt; bool:\n        return self.get() &lt; other\n\n    def __ge__(self, other: int) -&gt; bool:\n        return self.get() &gt;= other\n\n    def __gt__(self, other: int) -&gt; bool:\n        return self.get() &gt; other\n\n    def __eq__(self, other: object) -&gt; bool:\n        return self.get() == other\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.integer.IntegerContainer.__init__","title":"<code>__init__(value=0)</code>","text":"<p>Initialize the container with a value, zero by default</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The value the container holds</p> <code>0</code> Source code in <code>pycommons/base/container/integer.py</code> <pre><code>def __init__(self, value: int = 0):\n\"\"\"\n    Initialize the container with a value, zero by default\n\n    Args:\n        value: The value the container holds\n    \"\"\"\n    super().__init__(value)\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.integer.IntegerContainer.add","title":"<code>add(val)</code>","text":"<p>Add an integer to the container value and set the result as the container value.</p> <p>Parameters:</p> Name Type Description Default <code>val</code> <code>int</code> <p>Value to be added to the container value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>pycommons/base/container/integer.py</code> <pre><code>def add(self, val: int) -&gt; None:\n\"\"\"\n    Add an integer to the container value and set the result\n    as the container value.\n\n    Args:\n        val: Value to be added to the container value\n\n    Returns:\n        None\n    \"\"\"\n    self.set(self.get() + val)\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.integer.IntegerContainer.add_and_get","title":"<code>add_and_get(val)</code>","text":"<p>Add a value to the current value and get the result</p> <p>Parameters:</p> Name Type Description Default <code>val</code> <code>int</code> <p>The value to be added to the container value</p> required Source code in <code>pycommons/base/container/integer.py</code> <pre><code>def add_and_get(self, val: int) -&gt; int:\n\"\"\"\n    Add a value to the current value and get the result\n\n    Args:\n        val: The value to be added to the container value\n\n    Returns:\n\n    \"\"\"\n    return typing.cast(int, self.set_and_get(self.get() + val))\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.integer.IntegerContainer.get","title":"<code>get()</code>","text":"<p>The current value of the container</p> <p>Returns:</p> Type Description <code>int</code> <p>The current value of the container</p> Source code in <code>pycommons/base/container/integer.py</code> <pre><code>def get(self) -&gt; int:\n\"\"\"\n    The current value of the container\n\n    Returns:\n        The current value of the container\n    \"\"\"\n    return typing.cast(int, super().get())\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.integer.IntegerContainer.get_and_add","title":"<code>get_and_add(val)</code>","text":"<p>Returns the current value and adds the current value with the value passed in the argument</p> <p>Parameters:</p> Name Type Description Default <code>val</code> <code>int</code> <p>The value to be added to the container value</p> required <p>Returns:</p> Type Description <code>int</code> <p>The current value before performing addition</p> Source code in <code>pycommons/base/container/integer.py</code> <pre><code>def get_and_add(self, val: int) -&gt; int:\n\"\"\"\n    Returns the current value and adds the current value with the\n    value passed in the argument\n\n    Args:\n        val: The value to be added to the container value\n\n    Returns:\n        The current value before performing addition\n    \"\"\"\n    return typing.cast(int, self.get_and_set(self.get() + val))\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.integer.IntegerContainer.get_and_increment","title":"<code>get_and_increment()</code>","text":"<p>Gets the current value and then increments the value by one.</p> <p>Returns:</p> Type Description <code>int</code> <p>The container value before increment operation.</p> Source code in <code>pycommons/base/container/integer.py</code> <pre><code>def get_and_increment(self) -&gt; int:\n\"\"\"\n    Gets the current value and then increments the value by one.\n\n    Returns:\n        The container value before increment operation.\n    \"\"\"\n    return self.get_and_add(1)\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.integer.IntegerContainer.get_and_subtract","title":"<code>get_and_subtract(val)</code>","text":"<p>Gets the current value of the container and then subtracts the value from the container value</p> <p>Parameters:</p> Name Type Description Default <code>val</code> <code>int</code> <p>The value to be subtracted from the container value</p> required <p>Returns:</p> Type Description <code>int</code> <p>The value before the subtraction operation</p> Source code in <code>pycommons/base/container/integer.py</code> <pre><code>def get_and_subtract(self, val: int) -&gt; int:\n\"\"\"\n    Gets the current value of the container and then subtracts the value\n    from the container value\n\n    Args:\n        val: The value to be subtracted from the container value\n\n    Returns:\n        The value before the subtraction operation\n    \"\"\"\n    return self.get_and_add(-val)\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.integer.IntegerContainer.increment","title":"<code>increment()</code>","text":"<p>Increments the container value by one.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>pycommons/base/container/integer.py</code> <pre><code>def increment(self) -&gt; None:\n\"\"\"\n    Increments the container value by one.\n\n    Returns:\n        None\n    \"\"\"\n    return self.add(1)\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.integer.IntegerContainer.increment_and_get","title":"<code>increment_and_get()</code>","text":"<p>Increments the container value by one and returns the resulting value.</p> <p>Returns:</p> Type Description <code>int</code> <p>The container value after increment operation</p> Source code in <code>pycommons/base/container/integer.py</code> <pre><code>def increment_and_get(self) -&gt; int:\n\"\"\"\n    Increments the container value by one and returns the resulting value.\n\n    Returns:\n        The container value after increment operation\n    \"\"\"\n    return self.add_and_get(1)\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.integer.IntegerContainer.subtract","title":"<code>subtract(val)</code>","text":"<p>Subtract a value from the container value</p> <p>Parameters:</p> Name Type Description Default <code>val</code> <code>int</code> <p>The value to be subtracted from container value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>pycommons/base/container/integer.py</code> <pre><code>def subtract(self, val: int) -&gt; None:\n\"\"\"\n    Subtract a value from the container value\n\n    Args:\n        val: The value to be subtracted from container value\n\n    Returns:\n        None\n    \"\"\"\n    return self.add(-val)\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.integer.IntegerContainer.subtract_and_get","title":"<code>subtract_and_get(val)</code>","text":"<p>Subtracts the value from container value and returns the resulting operation after setting it in the container.</p> <p>Parameters:</p> Name Type Description Default <code>val</code> <code>int</code> <p>value to be subtracted from the container value</p> required <p>Returns:</p> Type Description <code>int</code> <p>The resulting value after subtraction operation</p> Source code in <code>pycommons/base/container/integer.py</code> <pre><code>def subtract_and_get(self, val: int) -&gt; int:\n\"\"\"\n    Subtracts the value from container value and returns\n    the resulting operation after setting it in the container.\n\n    Args:\n        val: value to be subtracted from the container value\n\n    Returns:\n        The resulting value after subtraction operation\n    \"\"\"\n    return self.add_and_get(-val)\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.OptionalContainer","title":"<code>OptionalContainer</code>","text":"<p>             Bases: <code>Generic[_T]</code></p> <p>Identical implementation of Java's Optional. A container object which may or may not contain a non-null value.</p> References <p>https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html</p> Source code in <code>pycommons/base/container/optional.py</code> <pre><code>class OptionalContainer(Generic[_T]):\n\"\"\"\n    Identical implementation of Java's Optional.\n    A container object which may or may not contain a non-null value.\n\n    References:\n        https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html\n    \"\"\"\n\n    _value: _T\n\n    def __init__(self, value: Optional[_T]):\n\"\"\"\n        Initialize the container with a value if present, None if not.\n        Args:\n            value: The initializing value. Can be None or not-None\n        \"\"\"\n        self._value = value\n\n    def get(self) -&gt; _T:\n\"\"\"\n        Gets the value in the container\n\n        Returns:\n            the value if present\n\n        Raises:\n            NoSuchElementError if the value is not present.\n\n        \"\"\"\n        if self._value is None:\n            raise NoSuchElementError(\"No value present\")\n        return self._value\n\n    def is_present(self) -&gt; bool:\n\"\"\"\n        Returns True if a value is present in the container, False otherwise\n\n        Returns:\n            True if the container value is not None\n        \"\"\"\n        return self._value is not None\n\n    def is_empty(self) -&gt; bool:\n\"\"\"\n        Returns True if the container value is None, False otherwise\n\n        Returns:\n            True if the container value is None\n        \"\"\"\n        return not self.is_present()\n\n    def if_present(self, consumer: Consumer[_T]) -&gt; None:\n\"\"\"\n        Run a consumer if the value is present.\n\n        Args:\n            consumer: Consumer Lambda\n\n        Returns:\n            None\n        \"\"\"\n        ObjectUtils.require_not_none(consumer)\n        if self.is_present():\n            consumer.accept(self._value)\n\n    def if_present_or_else(self, consumer: Consumer[_T], runnable: RunnableType) -&gt; None:\n\"\"\"\n        Runs a consumer if the value is present, else runs the runnable\n        Args:\n            consumer: Consumer function that runs when value is present\n            runnable: Runnable function that runs when value is None\n\n        Returns:\n            None\n        \"\"\"\n        ObjectUtils.require_not_none(consumer)\n        if self.is_present():\n            consumer.accept(self._value)\n        else:\n            Runnable.of(runnable).run()\n\n    def filter(self, predicate: Predicate[_T]) -&gt; OptionalContainer[_T]:\n        ObjectUtils.require_not_none(predicate)\n        if self.is_empty():\n            return self\n\n        return self if predicate.test(self._value) else OptionalContainer.empty()\n\n    def map(self, mapper: Function[_T, _U]) -&gt; OptionalContainer[_U]:\n        ObjectUtils.require_not_none(mapper)\n        if self.is_empty():\n            return OptionalContainer.empty()\n\n        return OptionalContainer.of_nullable(mapper.apply(self._value))\n\n    def flat_map(self, mapper: Function[_T, OptionalContainer[_U]]) -&gt; OptionalContainer[_U]:\n        ObjectUtils.require_not_none(mapper)\n        if self.is_empty():\n            return OptionalContainer.empty()\n\n        return ObjectUtils.get_not_none(mapper.apply(self._value))\n\n    def in_turn(self, supplier: SupplierType[OptionalContainer[_T]]) -&gt; OptionalContainer[_T]:\n        if self.is_present():\n            return self\n\n        return ObjectUtils.get_not_none(Supplier.of(supplier).get())\n\n    def or_else(self, other: _T) -&gt; _T:\n        return self._value if self.is_present() else other\n\n    def or_else_get(self, supplier: SupplierType[_T]) -&gt; _T:\n        return self._value if self.is_present() else Supplier.of(supplier).get()\n\n    def or_else_throw(self, supplier: Optional[SupplierType[_E]] = None) -&gt; _T:\n        if self.is_empty():\n            if supplier:\n                raise Supplier.of(supplier).get()\n            raise NoSuchElementError(\"No value present\")\n        return self._value\n\n    @classmethod\n    def of(cls, value: _T) -&gt; OptionalContainer[_T]:\n        if value is None:\n            raise TypeError(\"Value cannot be None\")\n        return cls(value)\n\n    @classmethod\n    def of_nullable(cls, value: _T) -&gt; OptionalContainer[_T]:\n        return cls(value)\n\n    @classmethod\n    def empty(cls) -&gt; OptionalContainer[_T]:\n        return cls(None)\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.optional.OptionalContainer.__init__","title":"<code>__init__(value)</code>","text":"<p>Initialize the container with a value if present, None if not.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Optional[_T]</code> <p>The initializing value. Can be None or not-None</p> required Source code in <code>pycommons/base/container/optional.py</code> <pre><code>def __init__(self, value: Optional[_T]):\n\"\"\"\n    Initialize the container with a value if present, None if not.\n    Args:\n        value: The initializing value. Can be None or not-None\n    \"\"\"\n    self._value = value\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.optional.OptionalContainer.get","title":"<code>get()</code>","text":"<p>Gets the value in the container</p> <p>Returns:</p> Type Description <code>_T</code> <p>the value if present</p> Source code in <code>pycommons/base/container/optional.py</code> <pre><code>def get(self) -&gt; _T:\n\"\"\"\n    Gets the value in the container\n\n    Returns:\n        the value if present\n\n    Raises:\n        NoSuchElementError if the value is not present.\n\n    \"\"\"\n    if self._value is None:\n        raise NoSuchElementError(\"No value present\")\n    return self._value\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.optional.OptionalContainer.if_present","title":"<code>if_present(consumer)</code>","text":"<p>Run a consumer if the value is present.</p> <p>Parameters:</p> Name Type Description Default <code>consumer</code> <code>Consumer[_T]</code> <p>Consumer Lambda</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>pycommons/base/container/optional.py</code> <pre><code>def if_present(self, consumer: Consumer[_T]) -&gt; None:\n\"\"\"\n    Run a consumer if the value is present.\n\n    Args:\n        consumer: Consumer Lambda\n\n    Returns:\n        None\n    \"\"\"\n    ObjectUtils.require_not_none(consumer)\n    if self.is_present():\n        consumer.accept(self._value)\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.optional.OptionalContainer.if_present_or_else","title":"<code>if_present_or_else(consumer, runnable)</code>","text":"<p>Runs a consumer if the value is present, else runs the runnable</p> <p>Parameters:</p> Name Type Description Default <code>consumer</code> <code>Consumer[_T]</code> <p>Consumer function that runs when value is present</p> required <code>runnable</code> <code>RunnableType</code> <p>Runnable function that runs when value is None</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>pycommons/base/container/optional.py</code> <pre><code>def if_present_or_else(self, consumer: Consumer[_T], runnable: RunnableType) -&gt; None:\n\"\"\"\n    Runs a consumer if the value is present, else runs the runnable\n    Args:\n        consumer: Consumer function that runs when value is present\n        runnable: Runnable function that runs when value is None\n\n    Returns:\n        None\n    \"\"\"\n    ObjectUtils.require_not_none(consumer)\n    if self.is_present():\n        consumer.accept(self._value)\n    else:\n        Runnable.of(runnable).run()\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.optional.OptionalContainer.is_empty","title":"<code>is_empty()</code>","text":"<p>Returns True if the container value is None, False otherwise</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the container value is None</p> Source code in <code>pycommons/base/container/optional.py</code> <pre><code>def is_empty(self) -&gt; bool:\n\"\"\"\n    Returns True if the container value is None, False otherwise\n\n    Returns:\n        True if the container value is None\n    \"\"\"\n    return not self.is_present()\n</code></pre>"},{"location":"package/container/container/#pycommons.base.container.optional.OptionalContainer.is_present","title":"<code>is_present()</code>","text":"<p>Returns True if a value is present in the container, False otherwise</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the container value is not None</p> Source code in <code>pycommons/base/container/optional.py</code> <pre><code>def is_present(self) -&gt; bool:\n\"\"\"\n    Returns True if a value is present in the container, False otherwise\n\n    Returns:\n        True if the container value is not None\n    \"\"\"\n    return self._value is not None\n</code></pre>"},{"location":"package/function/function/","title":"pycommons.base.function","text":""},{"location":"package/function/function/#pycommons.base.function.PredicateCallableType","title":"<code>PredicateCallableType = Callable[[_T], bool]</code>  <code>module-attribute</code>","text":"<p>A callable function that adheres to the signature of a predicate</p>"},{"location":"package/function/function/#pycommons.base.function.PredicateType","title":"<code>PredicateType = Union[Predicate[_T], PredicateCallableType[_T]]</code>  <code>module-attribute</code>","text":"<p>The type variable that is either a callable or a Predicate type which can be passed on to the <code>Predicate.of</code> to get an instance of predicate</p>"},{"location":"package/function/function/#pycommons.base.function.RunnableCallableType","title":"<code>RunnableCallableType = Callable[[], None]</code>  <code>module-attribute</code>","text":"<p>A callable function that adheres the signature of a runnable</p>"},{"location":"package/function/function/#pycommons.base.function.RunnableType","title":"<code>RunnableType = Union[Runnable, RunnableCallableType]</code>  <code>module-attribute</code>","text":"<p>The type variable that indicates a runnable type, a lambda or a runnable instance that can be passed to the <code>Runnable.of</code> classmethod</p>"},{"location":"package/function/function/#pycommons.base.function.SupplierCallableType","title":"<code>SupplierCallableType = Callable[[], _T]</code>  <code>module-attribute</code>","text":"<p>A callable function that adheres the signature of a supplier</p>"},{"location":"package/function/function/#pycommons.base.function.SupplierType","title":"<code>SupplierType = Union[Supplier[_T], SupplierCallableType[_T]]</code>  <code>module-attribute</code>","text":"<p>The generic supplier object that can be passed to the <code>Supplier.of</code>. Has the references to both Supplier and the type of lambdas that can defined for it to be called a supplier lambda.</p>"},{"location":"package/function/function/#pycommons.base.function.Predicate","title":"<code>Predicate</code>","text":"<p>             Bases: <code>Generic[_T]</code></p> <p>A functional interface that takes a value and returns a boolean result based on some operation performed on the object passed. Similar to Java's Predicate.</p> References <p>https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html</p> Source code in <code>pycommons/base/function/predicate.py</code> <pre><code>class Predicate(Generic[_T]):\n\"\"\"\n    A functional interface that takes a value and returns a boolean result based on some\n    operation performed on the object passed. Similar to Java's Predicate.\n\n    References:\n        https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html\n    \"\"\"\n\n    @classmethod\n    def of(cls, predicate: PredicateType[_T]) -&gt; Predicate[_T]:\n\"\"\"\n        If the passed argument is a callable, then wraps the callable in a Basic Predicate instance.\n        If the argument is already a predicate, then the method returns the passed argument.\n        Args:\n            predicate: Predicate Type (Callable/Instance)\n\n        Returns:\n            Predicate Instance\n        \"\"\"\n        ObjectUtils.require_not_none(predicate)\n\n        class BasicPredicate(Predicate[_T]):\n            def test(self, value: _T) -&gt; bool:\n                return predicate(value)\n\n        if isinstance(predicate, Predicate):\n            return predicate\n        return BasicPredicate()\n\n    @abstractmethod\n    def test(self, value: _T) -&gt; bool:\n\"\"\"\n        The functional interface method that takes a value and returns\n        a boolean result\n\n        Args:\n            value: Value passed to the predicate\n\n        Returns:\n            A boolean result\n        \"\"\"\n\n    def negate(self) -&gt; Predicate[_T]:\n\"\"\"\n        Returns a predicate that results in the negation of the current predicate's\n        [`test`][pycommons.base.function.Predicate.test] result. The resulting predicate\n        is wrapped in a Local Anonymous Predicate object\n        Returns:\n\n        \"\"\"\n        return self.of(lambda _t: not self.test(_t))\n\n    def do_and(self, predicate: Predicate[_T]) -&gt; Predicate[_T]:\n\"\"\"\n        Returns a predicate that `and`s the result of the current predicate and the\n        argument predicate\n\n        Args:\n            predicate: predicate\n\n        Returns:\n            A wrapped predicate whose result is an `and` operation of the current predicate\n            and the argument predicate\n        \"\"\"\n        ObjectUtils.require_not_none(predicate)\n        return self.of(lambda _t: self.test(_t) and predicate.test(_t))\n\n    def do_or(self, predicate: Predicate[_T]) -&gt; Predicate[_T]:\n\"\"\"\n        Returns a predicate that `or`s the result of the current predicate and the\n        argument predicate\n\n        Args:\n            predicate: predicate\n\n        Returns:\n            A wrapped predicate whose result is an `or` operation of the current predicate\n            and the argument predicate\n        \"\"\"\n        ObjectUtils.require_not_none(predicate)\n        return self.of(lambda _t: self.test(_t) or predicate.test(_t))\n\n    def __call__(self, t: _T, *args: Any, **kwargs: Any) -&gt; bool:\n        return self.test(t)\n</code></pre>"},{"location":"package/function/function/#pycommons.base.function.predicate.Predicate.do_and","title":"<code>do_and(predicate)</code>","text":"<p>Returns a predicate that <code>and</code>s the result of the current predicate and the argument predicate</p> <p>Parameters:</p> Name Type Description Default <code>predicate</code> <code>Predicate[_T]</code> <p>predicate</p> required <p>Returns:</p> Type Description <code>Predicate[_T]</code> <p>A wrapped predicate whose result is an <code>and</code> operation of the current predicate</p> <code>Predicate[_T]</code> <p>and the argument predicate</p> Source code in <code>pycommons/base/function/predicate.py</code> <pre><code>def do_and(self, predicate: Predicate[_T]) -&gt; Predicate[_T]:\n\"\"\"\n    Returns a predicate that `and`s the result of the current predicate and the\n    argument predicate\n\n    Args:\n        predicate: predicate\n\n    Returns:\n        A wrapped predicate whose result is an `and` operation of the current predicate\n        and the argument predicate\n    \"\"\"\n    ObjectUtils.require_not_none(predicate)\n    return self.of(lambda _t: self.test(_t) and predicate.test(_t))\n</code></pre>"},{"location":"package/function/function/#pycommons.base.function.predicate.Predicate.do_or","title":"<code>do_or(predicate)</code>","text":"<p>Returns a predicate that <code>or</code>s the result of the current predicate and the argument predicate</p> <p>Parameters:</p> Name Type Description Default <code>predicate</code> <code>Predicate[_T]</code> <p>predicate</p> required <p>Returns:</p> Type Description <code>Predicate[_T]</code> <p>A wrapped predicate whose result is an <code>or</code> operation of the current predicate</p> <code>Predicate[_T]</code> <p>and the argument predicate</p> Source code in <code>pycommons/base/function/predicate.py</code> <pre><code>def do_or(self, predicate: Predicate[_T]) -&gt; Predicate[_T]:\n\"\"\"\n    Returns a predicate that `or`s the result of the current predicate and the\n    argument predicate\n\n    Args:\n        predicate: predicate\n\n    Returns:\n        A wrapped predicate whose result is an `or` operation of the current predicate\n        and the argument predicate\n    \"\"\"\n    ObjectUtils.require_not_none(predicate)\n    return self.of(lambda _t: self.test(_t) or predicate.test(_t))\n</code></pre>"},{"location":"package/function/function/#pycommons.base.function.predicate.Predicate.negate","title":"<code>negate()</code>","text":"<p>Returns a predicate that results in the negation of the current predicate's <code>test</code> result. The resulting predicate is wrapped in a Local Anonymous Predicate object</p> Source code in <code>pycommons/base/function/predicate.py</code> <pre><code>def negate(self) -&gt; Predicate[_T]:\n\"\"\"\n    Returns a predicate that results in the negation of the current predicate's\n    [`test`][pycommons.base.function.Predicate.test] result. The resulting predicate\n    is wrapped in a Local Anonymous Predicate object\n    Returns:\n\n    \"\"\"\n    return self.of(lambda _t: not self.test(_t))\n</code></pre>"},{"location":"package/function/function/#pycommons.base.function.predicate.Predicate.of","title":"<code>of(predicate)</code>  <code>classmethod</code>","text":"<p>If the passed argument is a callable, then wraps the callable in a Basic Predicate instance. If the argument is already a predicate, then the method returns the passed argument.</p> <p>Parameters:</p> Name Type Description Default <code>predicate</code> <code>PredicateType[_T]</code> <p>Predicate Type (Callable/Instance)</p> required <p>Returns:</p> Type Description <code>Predicate[_T]</code> <p>Predicate Instance</p> Source code in <code>pycommons/base/function/predicate.py</code> <pre><code>@classmethod\ndef of(cls, predicate: PredicateType[_T]) -&gt; Predicate[_T]:\n\"\"\"\n    If the passed argument is a callable, then wraps the callable in a Basic Predicate instance.\n    If the argument is already a predicate, then the method returns the passed argument.\n    Args:\n        predicate: Predicate Type (Callable/Instance)\n\n    Returns:\n        Predicate Instance\n    \"\"\"\n    ObjectUtils.require_not_none(predicate)\n\n    class BasicPredicate(Predicate[_T]):\n        def test(self, value: _T) -&gt; bool:\n            return predicate(value)\n\n    if isinstance(predicate, Predicate):\n        return predicate\n    return BasicPredicate()\n</code></pre>"},{"location":"package/function/function/#pycommons.base.function.predicate.Predicate.test","title":"<code>test(value)</code>  <code>abstractmethod</code>","text":"<p>The functional interface method that takes a value and returns a boolean result</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>_T</code> <p>Value passed to the predicate</p> required <p>Returns:</p> Type Description <code>bool</code> <p>A boolean result</p> Source code in <code>pycommons/base/function/predicate.py</code> <pre><code>@abstractmethod\ndef test(self, value: _T) -&gt; bool:\n\"\"\"\n    The functional interface method that takes a value and returns\n    a boolean result\n\n    Args:\n        value: Value passed to the predicate\n\n    Returns:\n        A boolean result\n    \"\"\"\n</code></pre>"},{"location":"package/function/function/#pycommons.base.function.Runnable","title":"<code>Runnable</code>","text":"<p>Provides the functionalities of the Java's Runnable functional interface with the interface method <code>run</code>. The interface can be used with the threading operations. The interface provides a wrapper classmethod named <code>of</code> that wraps a callable in Runnable instance.</p> References <p>https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html</p> Source code in <code>pycommons/base/function/runnable.py</code> <pre><code>class Runnable:\n\"\"\"\n    Provides the functionalities of the Java's Runnable functional interface with the\n    interface method [`run`][pycommons.base.function.Runnable.run].\n    The interface can be used with the threading operations. The interface\n    provides a wrapper classmethod named [`of`][pycommons.base.function.Runnable.of] that\n    wraps a callable in Runnable instance.\n\n    References:\n        https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html\n    \"\"\"\n\n    @classmethod\n    def of(cls, runnable: RunnableType) -&gt; Runnable:\n\"\"\"\n        Wraps a callable in a BasicRunnable instance. If the passed object is a runnable, then\n        the supplier is not runnable.\n\n        Args:\n            runnable: Runnable object or a callable lambda\n\n        Returns:\n            An instance of runnable.\n        \"\"\"\n\n        class BasicRunnable(Runnable):\n            def run(self) -&gt; None:\n                runnable()\n\n        if isinstance(runnable, Runnable):\n            return runnable\n        return BasicRunnable()\n\n    @abstractmethod\n    def run(self) -&gt; None:\n\"\"\"\n        Run the interface method\n\n        Returns:\n            None\n        \"\"\"\n\n    def __call__(self, *args: Any, **kwargs: Any) -&gt; None:\n        self.run()\n</code></pre>"},{"location":"package/function/function/#pycommons.base.function.runnable.Runnable.of","title":"<code>of(runnable)</code>  <code>classmethod</code>","text":"<p>Wraps a callable in a BasicRunnable instance. If the passed object is a runnable, then the supplier is not runnable.</p> <p>Parameters:</p> Name Type Description Default <code>runnable</code> <code>RunnableType</code> <p>Runnable object or a callable lambda</p> required <p>Returns:</p> Type Description <code>Runnable</code> <p>An instance of runnable.</p> Source code in <code>pycommons/base/function/runnable.py</code> <pre><code>@classmethod\ndef of(cls, runnable: RunnableType) -&gt; Runnable:\n\"\"\"\n    Wraps a callable in a BasicRunnable instance. If the passed object is a runnable, then\n    the supplier is not runnable.\n\n    Args:\n        runnable: Runnable object or a callable lambda\n\n    Returns:\n        An instance of runnable.\n    \"\"\"\n\n    class BasicRunnable(Runnable):\n        def run(self) -&gt; None:\n            runnable()\n\n    if isinstance(runnable, Runnable):\n        return runnable\n    return BasicRunnable()\n</code></pre>"},{"location":"package/function/function/#pycommons.base.function.runnable.Runnable.run","title":"<code>run()</code>  <code>abstractmethod</code>","text":"<p>Run the interface method</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>pycommons/base/function/runnable.py</code> <pre><code>@abstractmethod\ndef run(self) -&gt; None:\n\"\"\"\n    Run the interface method\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"package/function/function/#pycommons.base.function.Supplier","title":"<code>Supplier</code>","text":"<p>             Bases: <code>FunctionalInterface</code>, <code>Generic[_T]</code></p> <p>A functional interface that has a method <code>get</code> that returns a value. Mirrors the Java's Supplier interface. A lambda or another supplier can be wrapped into a supplier by calling the <code>of</code> classmethod. The method also implements the <code>__call__</code> method so that an instance of supplier can be called like a function.</p> References <p>https://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html</p> Source code in <code>pycommons/base/function/supplier.py</code> <pre><code>class Supplier(FunctionalInterface, Generic[_T]):\n\"\"\"\n    A functional interface that has a method `get` that returns a value. Mirrors the Java's Supplier\n    interface. A lambda or another supplier can be wrapped into a supplier by calling the\n    [`of`][pycommons.base.function.Supplier.of] classmethod. The method also implements the\n    `__call__` method so that an instance of supplier can be called like a function.\n\n    References:\n        https://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html\n    \"\"\"\n\n    @classmethod\n    def of(cls, supplier: SupplierType[_T]) -&gt; Supplier[_T]:\n\"\"\"\n        Wrap a lambda or a function in a Basic Supplier Implementation\n        that just calls the mentioned lambda. If the passed object is a supplier,\n        then it is returned without wrapping.\n        Args:\n            supplier: A supplier type object\n\n        Returns:\n            A supplier object regardless of the input.\n        \"\"\"\n\n        class BasicSupplier(Supplier[_T]):\n            def get(self) -&gt; _T:\n                return supplier()\n\n        if isinstance(supplier, Supplier):\n            return supplier\n        return BasicSupplier()\n\n    @abstractmethod\n    def get(self) -&gt; _T:\n\"\"\"\n        The interface abstract method.\n\n        Returns:\n            The supplier return object\n        \"\"\"\n\n    def __call__(self, *args: Any, **kwargs: Any) -&gt; _T:\n        return self.get()\n</code></pre>"},{"location":"package/function/function/#pycommons.base.function.supplier.Supplier.get","title":"<code>get()</code>  <code>abstractmethod</code>","text":"<p>The interface abstract method.</p> <p>Returns:</p> Type Description <code>_T</code> <p>The supplier return object</p> Source code in <code>pycommons/base/function/supplier.py</code> <pre><code>@abstractmethod\ndef get(self) -&gt; _T:\n\"\"\"\n    The interface abstract method.\n\n    Returns:\n        The supplier return object\n    \"\"\"\n</code></pre>"},{"location":"package/function/function/#pycommons.base.function.supplier.Supplier.of","title":"<code>of(supplier)</code>  <code>classmethod</code>","text":"<p>Wrap a lambda or a function in a Basic Supplier Implementation that just calls the mentioned lambda. If the passed object is a supplier, then it is returned without wrapping.</p> <p>Parameters:</p> Name Type Description Default <code>supplier</code> <code>SupplierType[_T]</code> <p>A supplier type object</p> required <p>Returns:</p> Type Description <code>Supplier[_T]</code> <p>A supplier object regardless of the input.</p> Source code in <code>pycommons/base/function/supplier.py</code> <pre><code>@classmethod\ndef of(cls, supplier: SupplierType[_T]) -&gt; Supplier[_T]:\n\"\"\"\n    Wrap a lambda or a function in a Basic Supplier Implementation\n    that just calls the mentioned lambda. If the passed object is a supplier,\n    then it is returned without wrapping.\n    Args:\n        supplier: A supplier type object\n\n    Returns:\n        A supplier object regardless of the input.\n    \"\"\"\n\n    class BasicSupplier(Supplier[_T]):\n        def get(self) -&gt; _T:\n            return supplier()\n\n    if isinstance(supplier, Supplier):\n        return supplier\n    return BasicSupplier()\n</code></pre>"},{"location":"package/maps/maps/","title":"pycommons.base.maps","text":""},{"location":"package/maps/maps/#pycommons.base.maps.Map","title":"<code>Map</code>","text":"<p>             Bases: <code>UserDict</code>, <code>Generic[_K, _V]</code></p> <p>The custom Dictionary implementation that provides methods that are similar to Java's Map implementation.</p> Source code in <code>pycommons/base/maps/maps.py</code> <pre><code>class Map(UserDict, Generic[_K, _V]):  # type: ignore\n\"\"\"\n    The custom Dictionary implementation that provides methods\n    that are similar to Java's [Map](https://docs.oracle.com/javase/8/docs/api/java/util/Map.html)\n    implementation.\n    \"\"\"\n\n    data: Dict[_K, _V]\n\n    class Entry:\n\"\"\"\n        A dataclass that holds an entry(key, value) of a map.\n        \"\"\"\n\n        def __init__(self, key: _K, value: _V):\n            self._key: _K = key\n            self._value: _V = value\n\n        @property\n        def key(self) -&gt; _K:\n            return self._key\n\n        @property\n        def value(self) -&gt; _V:\n            return typing.cast(_V, self._value)\n\n        def __hash__(self) -&gt; int:\n            return hash(self.key)\n\n    def put(self, k: _K, v: _V) -&gt; _V:\n\"\"\"\n        Add a key value pair to the map\n        Args:\n            k: Key\n            v: Value\n\n        Returns:\n            The value.\n        \"\"\"\n        self.data[k] = v\n        return self.data[k]\n\n    def put_entry(self, entry: \"Map.Entry\") -&gt; None:\n\"\"\"\n        Put an entry to the map\n        Args:\n            entry: `Map.Entry` instance that contains Key and Value\n\n        Returns:\n            None\n        \"\"\"\n        self.put(typing.cast(_K, entry.key), typing.cast(_V, entry.value))\n\n    def put_if_absent(self, k: _K, v: _V) -&gt; _V:\n\"\"\"\n        Add a key value pair to the map only when the key is not present\n        Args:\n            k: Key\n            v: Value\n\n        Returns:\n\n        \"\"\"\n        if k not in self.data:\n            self.put(k, v)\n        return self.data[k]\n\n    def compute_if_absent(self, k: _K, function: FunctionType[_K, _V]) -&gt; _V:\n\"\"\"\n        Add a key value pair by calling a function that\n        returns the value based on the key passed.\n\n        Args:\n            k: key\n            function: the callable that generates the value\n\n        Returns:\n            the value\n        \"\"\"\n        self.put_if_absent(k, Function.of(function).apply(k))\n        return self.data[k]\n\n    def size(self) -&gt; int:\n\"\"\"\n        Returns the size of the map\n\n        Returns:\n            the size of the map\n        \"\"\"\n        return len(self.data)\n\n    def is_empty(self) -&gt; bool:\n\"\"\"\n        Returns True if the map is empty\n\n        Returns:\n            true if the map is empty, false otherwise\n        \"\"\"\n        return self.size() == 0\n\n    def contains_key(self, k: _K) -&gt; bool:\n\"\"\"\n        Returns True if a particular key is present in the map.\n\n        Args:\n            k: key\n\n        Returns:\n            True if a key is present in the map, False otherwise\n        \"\"\"\n        return k in self.data\n\n    def contains_value(self, v: _V) -&gt; bool:\n\"\"\"\n        Returns True if a particular value is present in the map.\n\n        Args:\n            v: value\n\n        Returns:\n            True if a value is present in the map, False otherwise\n        \"\"\"\n        return v in self.data.values()\n\n    def remove(self, k: _K) -&gt; Optional[_V]:\n\"\"\"\n        Removes a key `k` from the map if its present and returns the removed value. If the key\n        is not present, the method returns `None`. The return value `None`\n        does not imply that the key was not present in the dictionary.\n        It can also mean, the value of the key in the map was None.\n\n        Args:\n            k: key to be removed from map\n\n        Returns:\n            Value if the key is present. None, if the value is None or the\n            map doesn't contain the key.\n        \"\"\"\n        return self.data.pop(k) if k in self.data else None\n\n    def put_all(self, m: Dict[_K, _V]) -&gt; None:\n\"\"\"\n        Put all the keys from another dictionary to this map\n\n        Args:\n            m: map\n\n        Returns:\n            None\n        \"\"\"\n        self.data.update(m)\n\n    def key_set(self) -&gt; Set[_K]:\n\"\"\"\n        Returns the set of keys in the map\n\n        Returns:\n            Set of keys\n        \"\"\"\n        return set(self.keys())\n\n    def entry_set(self) -&gt; Set[\"Map.Entry\"]:\n\"\"\"\n        Returns the set of `Map.Entry` in the map\n\n        Returns:\n            Set of map entries\n        \"\"\"\n        return {Map.Entry(k, v) for k, v in self.data.items()}\n\n    def for_each(self, bi_consumer: BiConsumerType[_K, _V]) -&gt; None:\n\"\"\"\n        Runs a bi-consumer callable on each key value pairs in the map\n\n        Args:\n            bi_consumer: Callable that consumes 2 args, key and value\n\n        Returns:\n            None\n        \"\"\"\n        _consumer: BiConsumer[_K, _V] = BiConsumer.of(bi_consumer)\n        for k, v in self.data.items():\n            _consumer.accept(k, v)\n\n    def for_each_entry(self, consumer: ConsumerType[\"Map.Entry\"]) -&gt; None:\n\"\"\"\n        Runs a consumer callable on each entry(`Map.Entry`) in the map\n        Args:\n            consumer: Callable that consumes 1 arg, the Map.Entry object\n\n        Returns:\n            None\n        \"\"\"\n        _consumer: Consumer[Map.Entry] = Consumer.of(consumer)\n        for k, v in self.data.items():\n            _consumer.accept(Map.Entry(k, v))\n\n    def replace_old_value(self, k: _K, old_value: _V, new_value: _V) -&gt; bool:\n\"\"\"\n        Replaces a key with a new value only if the `old_value` arg passed matches with the current\n        value present in the map.\n        Args:\n            k: key\n            old_value: Old value\n            new_value: New value to be inserted to the map\n\n        Returns:\n            True if the value is replaced, False otherwise\n        \"\"\"\n        _v = self.get(k)\n        if _v == old_value:\n            self.put(k, new_value)\n            return True\n        return False\n\n    def replace(self, k: _K, v: _V) -&gt; Optional[_V]:\n\"\"\"\n        Replace the key from the map if present. Returns the old value if present. The method\n        will return None otherwise. The return value None does not imply that the\n        key was not replaced. It can also mean that the value against that key was\n        None before replacement.\n\n        Args:\n            k: key\n            v: value\n\n        Returns:\n            The old value if replaced, None otherwise\n        \"\"\"\n        if self.contains_key(k):\n            _old_value = self.data[k]\n            self.data[k] = v\n            return _old_value\n        return None\n\n    def stream(self) -&gt; Stream[\"Map.Entry\"]:\n\"\"\"\n        Create a stream of the map entries present in the map.\n\n        Returns:\n            Stream of entries\n        \"\"\"\n        return IteratorStream(iter(self.entry_set()))\n</code></pre>"},{"location":"package/maps/maps/#pycommons.base.maps.maps.Map.Entry","title":"<code>Entry</code>","text":"<p>A dataclass that holds an entry(key, value) of a map.</p> Source code in <code>pycommons/base/maps/maps.py</code> <pre><code>class Entry:\n\"\"\"\n    A dataclass that holds an entry(key, value) of a map.\n    \"\"\"\n\n    def __init__(self, key: _K, value: _V):\n        self._key: _K = key\n        self._value: _V = value\n\n    @property\n    def key(self) -&gt; _K:\n        return self._key\n\n    @property\n    def value(self) -&gt; _V:\n        return typing.cast(_V, self._value)\n\n    def __hash__(self) -&gt; int:\n        return hash(self.key)\n</code></pre>"},{"location":"package/maps/maps/#pycommons.base.maps.maps.Map.compute_if_absent","title":"<code>compute_if_absent(k, function)</code>","text":"<p>Add a key value pair by calling a function that returns the value based on the key passed.</p> <p>Parameters:</p> Name Type Description Default <code>k</code> <code>_K</code> <p>key</p> required <code>function</code> <code>FunctionType[_K, _V]</code> <p>the callable that generates the value</p> required <p>Returns:</p> Type Description <code>_V</code> <p>the value</p> Source code in <code>pycommons/base/maps/maps.py</code> <pre><code>def compute_if_absent(self, k: _K, function: FunctionType[_K, _V]) -&gt; _V:\n\"\"\"\n    Add a key value pair by calling a function that\n    returns the value based on the key passed.\n\n    Args:\n        k: key\n        function: the callable that generates the value\n\n    Returns:\n        the value\n    \"\"\"\n    self.put_if_absent(k, Function.of(function).apply(k))\n    return self.data[k]\n</code></pre>"},{"location":"package/maps/maps/#pycommons.base.maps.maps.Map.contains_key","title":"<code>contains_key(k)</code>","text":"<p>Returns True if a particular key is present in the map.</p> <p>Parameters:</p> Name Type Description Default <code>k</code> <code>_K</code> <p>key</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if a key is present in the map, False otherwise</p> Source code in <code>pycommons/base/maps/maps.py</code> <pre><code>def contains_key(self, k: _K) -&gt; bool:\n\"\"\"\n    Returns True if a particular key is present in the map.\n\n    Args:\n        k: key\n\n    Returns:\n        True if a key is present in the map, False otherwise\n    \"\"\"\n    return k in self.data\n</code></pre>"},{"location":"package/maps/maps/#pycommons.base.maps.maps.Map.contains_value","title":"<code>contains_value(v)</code>","text":"<p>Returns True if a particular value is present in the map.</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>_V</code> <p>value</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if a value is present in the map, False otherwise</p> Source code in <code>pycommons/base/maps/maps.py</code> <pre><code>def contains_value(self, v: _V) -&gt; bool:\n\"\"\"\n    Returns True if a particular value is present in the map.\n\n    Args:\n        v: value\n\n    Returns:\n        True if a value is present in the map, False otherwise\n    \"\"\"\n    return v in self.data.values()\n</code></pre>"},{"location":"package/maps/maps/#pycommons.base.maps.maps.Map.entry_set","title":"<code>entry_set()</code>","text":"<p>Returns the set of <code>Map.Entry</code> in the map</p> <p>Returns:</p> Type Description <code>Set[Map.Entry]</code> <p>Set of map entries</p> Source code in <code>pycommons/base/maps/maps.py</code> <pre><code>def entry_set(self) -&gt; Set[\"Map.Entry\"]:\n\"\"\"\n    Returns the set of `Map.Entry` in the map\n\n    Returns:\n        Set of map entries\n    \"\"\"\n    return {Map.Entry(k, v) for k, v in self.data.items()}\n</code></pre>"},{"location":"package/maps/maps/#pycommons.base.maps.maps.Map.for_each","title":"<code>for_each(bi_consumer)</code>","text":"<p>Runs a bi-consumer callable on each key value pairs in the map</p> <p>Parameters:</p> Name Type Description Default <code>bi_consumer</code> <code>BiConsumerType[_K, _V]</code> <p>Callable that consumes 2 args, key and value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>pycommons/base/maps/maps.py</code> <pre><code>def for_each(self, bi_consumer: BiConsumerType[_K, _V]) -&gt; None:\n\"\"\"\n    Runs a bi-consumer callable on each key value pairs in the map\n\n    Args:\n        bi_consumer: Callable that consumes 2 args, key and value\n\n    Returns:\n        None\n    \"\"\"\n    _consumer: BiConsumer[_K, _V] = BiConsumer.of(bi_consumer)\n    for k, v in self.data.items():\n        _consumer.accept(k, v)\n</code></pre>"},{"location":"package/maps/maps/#pycommons.base.maps.maps.Map.for_each_entry","title":"<code>for_each_entry(consumer)</code>","text":"<p>Runs a consumer callable on each entry(<code>Map.Entry</code>) in the map</p> <p>Parameters:</p> Name Type Description Default <code>consumer</code> <code>ConsumerType[Map.Entry]</code> <p>Callable that consumes 1 arg, the Map.Entry object</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>pycommons/base/maps/maps.py</code> <pre><code>def for_each_entry(self, consumer: ConsumerType[\"Map.Entry\"]) -&gt; None:\n\"\"\"\n    Runs a consumer callable on each entry(`Map.Entry`) in the map\n    Args:\n        consumer: Callable that consumes 1 arg, the Map.Entry object\n\n    Returns:\n        None\n    \"\"\"\n    _consumer: Consumer[Map.Entry] = Consumer.of(consumer)\n    for k, v in self.data.items():\n        _consumer.accept(Map.Entry(k, v))\n</code></pre>"},{"location":"package/maps/maps/#pycommons.base.maps.maps.Map.is_empty","title":"<code>is_empty()</code>","text":"<p>Returns True if the map is empty</p> <p>Returns:</p> Type Description <code>bool</code> <p>true if the map is empty, false otherwise</p> Source code in <code>pycommons/base/maps/maps.py</code> <pre><code>def is_empty(self) -&gt; bool:\n\"\"\"\n    Returns True if the map is empty\n\n    Returns:\n        true if the map is empty, false otherwise\n    \"\"\"\n    return self.size() == 0\n</code></pre>"},{"location":"package/maps/maps/#pycommons.base.maps.maps.Map.key_set","title":"<code>key_set()</code>","text":"<p>Returns the set of keys in the map</p> <p>Returns:</p> Type Description <code>Set[_K]</code> <p>Set of keys</p> Source code in <code>pycommons/base/maps/maps.py</code> <pre><code>def key_set(self) -&gt; Set[_K]:\n\"\"\"\n    Returns the set of keys in the map\n\n    Returns:\n        Set of keys\n    \"\"\"\n    return set(self.keys())\n</code></pre>"},{"location":"package/maps/maps/#pycommons.base.maps.maps.Map.put","title":"<code>put(k, v)</code>","text":"<p>Add a key value pair to the map</p> <p>Parameters:</p> Name Type Description Default <code>k</code> <code>_K</code> <p>Key</p> required <code>v</code> <code>_V</code> <p>Value</p> required <p>Returns:</p> Type Description <code>_V</code> <p>The value.</p> Source code in <code>pycommons/base/maps/maps.py</code> <pre><code>def put(self, k: _K, v: _V) -&gt; _V:\n\"\"\"\n    Add a key value pair to the map\n    Args:\n        k: Key\n        v: Value\n\n    Returns:\n        The value.\n    \"\"\"\n    self.data[k] = v\n    return self.data[k]\n</code></pre>"},{"location":"package/maps/maps/#pycommons.base.maps.maps.Map.put_all","title":"<code>put_all(m)</code>","text":"<p>Put all the keys from another dictionary to this map</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>Dict[_K, _V]</code> <p>map</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>pycommons/base/maps/maps.py</code> <pre><code>def put_all(self, m: Dict[_K, _V]) -&gt; None:\n\"\"\"\n    Put all the keys from another dictionary to this map\n\n    Args:\n        m: map\n\n    Returns:\n        None\n    \"\"\"\n    self.data.update(m)\n</code></pre>"},{"location":"package/maps/maps/#pycommons.base.maps.maps.Map.put_entry","title":"<code>put_entry(entry)</code>","text":"<p>Put an entry to the map</p> <p>Parameters:</p> Name Type Description Default <code>entry</code> <code>Entry</code> <p><code>Map.Entry</code> instance that contains Key and Value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>pycommons/base/maps/maps.py</code> <pre><code>def put_entry(self, entry: \"Map.Entry\") -&gt; None:\n\"\"\"\n    Put an entry to the map\n    Args:\n        entry: `Map.Entry` instance that contains Key and Value\n\n    Returns:\n        None\n    \"\"\"\n    self.put(typing.cast(_K, entry.key), typing.cast(_V, entry.value))\n</code></pre>"},{"location":"package/maps/maps/#pycommons.base.maps.maps.Map.put_if_absent","title":"<code>put_if_absent(k, v)</code>","text":"<p>Add a key value pair to the map only when the key is not present</p> <p>Parameters:</p> Name Type Description Default <code>k</code> <code>_K</code> <p>Key</p> required <code>v</code> <code>_V</code> <p>Value</p> required Source code in <code>pycommons/base/maps/maps.py</code> <pre><code>def put_if_absent(self, k: _K, v: _V) -&gt; _V:\n\"\"\"\n    Add a key value pair to the map only when the key is not present\n    Args:\n        k: Key\n        v: Value\n\n    Returns:\n\n    \"\"\"\n    if k not in self.data:\n        self.put(k, v)\n    return self.data[k]\n</code></pre>"},{"location":"package/maps/maps/#pycommons.base.maps.maps.Map.remove","title":"<code>remove(k)</code>","text":"<p>Removes a key <code>k</code> from the map if its present and returns the removed value. If the key is not present, the method returns <code>None</code>. The return value <code>None</code> does not imply that the key was not present in the dictionary. It can also mean, the value of the key in the map was None.</p> <p>Parameters:</p> Name Type Description Default <code>k</code> <code>_K</code> <p>key to be removed from map</p> required <p>Returns:</p> Type Description <code>Optional[_V]</code> <p>Value if the key is present. None, if the value is None or the</p> <code>Optional[_V]</code> <p>map doesn't contain the key.</p> Source code in <code>pycommons/base/maps/maps.py</code> <pre><code>def remove(self, k: _K) -&gt; Optional[_V]:\n\"\"\"\n    Removes a key `k` from the map if its present and returns the removed value. If the key\n    is not present, the method returns `None`. The return value `None`\n    does not imply that the key was not present in the dictionary.\n    It can also mean, the value of the key in the map was None.\n\n    Args:\n        k: key to be removed from map\n\n    Returns:\n        Value if the key is present. None, if the value is None or the\n        map doesn't contain the key.\n    \"\"\"\n    return self.data.pop(k) if k in self.data else None\n</code></pre>"},{"location":"package/maps/maps/#pycommons.base.maps.maps.Map.replace","title":"<code>replace(k, v)</code>","text":"<p>Replace the key from the map if present. Returns the old value if present. The method will return None otherwise. The return value None does not imply that the key was not replaced. It can also mean that the value against that key was None before replacement.</p> <p>Parameters:</p> Name Type Description Default <code>k</code> <code>_K</code> <p>key</p> required <code>v</code> <code>_V</code> <p>value</p> required <p>Returns:</p> Type Description <code>Optional[_V]</code> <p>The old value if replaced, None otherwise</p> Source code in <code>pycommons/base/maps/maps.py</code> <pre><code>def replace(self, k: _K, v: _V) -&gt; Optional[_V]:\n\"\"\"\n    Replace the key from the map if present. Returns the old value if present. The method\n    will return None otherwise. The return value None does not imply that the\n    key was not replaced. It can also mean that the value against that key was\n    None before replacement.\n\n    Args:\n        k: key\n        v: value\n\n    Returns:\n        The old value if replaced, None otherwise\n    \"\"\"\n    if self.contains_key(k):\n        _old_value = self.data[k]\n        self.data[k] = v\n        return _old_value\n    return None\n</code></pre>"},{"location":"package/maps/maps/#pycommons.base.maps.maps.Map.replace_old_value","title":"<code>replace_old_value(k, old_value, new_value)</code>","text":"<p>Replaces a key with a new value only if the <code>old_value</code> arg passed matches with the current value present in the map.</p> <p>Parameters:</p> Name Type Description Default <code>k</code> <code>_K</code> <p>key</p> required <code>old_value</code> <code>_V</code> <p>Old value</p> required <code>new_value</code> <code>_V</code> <p>New value to be inserted to the map</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the value is replaced, False otherwise</p> Source code in <code>pycommons/base/maps/maps.py</code> <pre><code>def replace_old_value(self, k: _K, old_value: _V, new_value: _V) -&gt; bool:\n\"\"\"\n    Replaces a key with a new value only if the `old_value` arg passed matches with the current\n    value present in the map.\n    Args:\n        k: key\n        old_value: Old value\n        new_value: New value to be inserted to the map\n\n    Returns:\n        True if the value is replaced, False otherwise\n    \"\"\"\n    _v = self.get(k)\n    if _v == old_value:\n        self.put(k, new_value)\n        return True\n    return False\n</code></pre>"},{"location":"package/maps/maps/#pycommons.base.maps.maps.Map.size","title":"<code>size()</code>","text":"<p>Returns the size of the map</p> <p>Returns:</p> Type Description <code>int</code> <p>the size of the map</p> Source code in <code>pycommons/base/maps/maps.py</code> <pre><code>def size(self) -&gt; int:\n\"\"\"\n    Returns the size of the map\n\n    Returns:\n        the size of the map\n    \"\"\"\n    return len(self.data)\n</code></pre>"},{"location":"package/maps/maps/#pycommons.base.maps.maps.Map.stream","title":"<code>stream()</code>","text":"<p>Create a stream of the map entries present in the map.</p> <p>Returns:</p> Type Description <code>Stream[Map.Entry]</code> <p>Stream of entries</p> Source code in <code>pycommons/base/maps/maps.py</code> <pre><code>def stream(self) -&gt; Stream[\"Map.Entry\"]:\n\"\"\"\n    Create a stream of the map entries present in the map.\n\n    Returns:\n        Stream of entries\n    \"\"\"\n    return IteratorStream(iter(self.entry_set()))\n</code></pre>"}]}